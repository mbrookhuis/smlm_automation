// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	infoblox "ecp-golang-cm/pkg/util/infoblox"

	mock "github.com/stretchr/testify/mock"
)

// DNSProvider is an autogenerated mock type for the DNSProvider type
type DNSProvider struct {
	mock.Mock
}

// IBCheckAndCreateARecord provides a mock function with given fields: _a0
func (_m *DNSProvider) IBCheckAndCreateARecord(_a0 infoblox.DNSRecord) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBCheckAndCreateARecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(infoblox.DNSRecord) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBCheckAndCreateCNameRecord provides a mock function with given fields: _a0, _a1
func (_m *DNSProvider) IBCheckAndCreateCNameRecord(_a0 infoblox.DNSRecord, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for IBCheckAndCreateCNameRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(infoblox.DNSRecord, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBCheckAndCreatePTRRecord provides a mock function with given fields: _a0
func (_m *DNSProvider) IBCheckAndCreatePTRRecord(_a0 infoblox.DNSRecord) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBCheckAndCreatePTRRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(infoblox.DNSRecord) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBCheckAndCreateZoneAuth provides a mock function with given fields: _a0
func (_m *DNSProvider) IBCheckAndCreateZoneAuth(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBCheckAndCreateZoneAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBDeleteARecord provides a mock function with given fields: _a0
func (_m *DNSProvider) IBDeleteARecord(_a0 infoblox.DNSRecord) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBDeleteARecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(infoblox.DNSRecord) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBDeleteCNameRecordCanonical provides a mock function with given fields: _a0
func (_m *DNSProvider) IBDeleteCNameRecordCanonical(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBDeleteCNameRecordCanonical")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBDeleteCNameRecordName provides a mock function with given fields: _a0
func (_m *DNSProvider) IBDeleteCNameRecordName(_a0 string) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBDeleteCNameRecordName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBDeletePTRRecord provides a mock function with given fields: _a0
func (_m *DNSProvider) IBDeletePTRRecord(_a0 infoblox.DNSRecord) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IBDeletePTRRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(infoblox.DNSRecord) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDNSProvider creates a new instance of DNSProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDNSProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *DNSProvider {
	mock := &DNSProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
