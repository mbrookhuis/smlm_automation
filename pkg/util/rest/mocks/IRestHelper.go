// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	rest "ecp-golang-cm/pkg/util/rest"

	mock "github.com/stretchr/testify/mock"
)

// IRestHelper is an autogenerated mock type for the IRestHelper type
type IRestHelper struct {
	mock.Mock
}

// HTTPCaller provides a mock function with given fields: skipStatusRetry, requestBody, method, url, headers
func (_m *IRestHelper) HTTPCaller(skipStatusRetry bool, requestBody []byte, method string, url string, headers map[string]string) (*rest.HTTPHelperStruct, error) {
	ret := _m.Called(skipStatusRetry, requestBody, method, url, headers)

	if len(ret) == 0 {
		panic("no return value specified for HTTPCaller")
	}

	var r0 *rest.HTTPHelperStruct
	var r1 error
	if rf, ok := ret.Get(0).(func(bool, []byte, string, string, map[string]string) (*rest.HTTPHelperStruct, error)); ok {
		return rf(skipStatusRetry, requestBody, method, url, headers)
	}
	if rf, ok := ret.Get(0).(func(bool, []byte, string, string, map[string]string) *rest.HTTPHelperStruct); ok {
		r0 = rf(skipStatusRetry, requestBody, method, url, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rest.HTTPHelperStruct)
		}
	}

	if rf, ok := ret.Get(1).(func(bool, []byte, string, string, map[string]string) error); ok {
		r1 = rf(skipStatusRetry, requestBody, method, url, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIRestHelper creates a new instance of IRestHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRestHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRestHelper {
	mock := &IRestHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
